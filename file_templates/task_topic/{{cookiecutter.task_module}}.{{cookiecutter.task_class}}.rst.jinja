.. lsst-task-topic:: {{ cookiecutter.task_module }}.{{ cookiecutter.task_class }}

{{ "#" * (cookiecutter.task_class|length) }}
{{ cookiecutter.task_class }}
{{ "#" * (cookiecutter.task_class|length) }}

.. Summary paragraph (a few sentences)
.. The aim is to say what the task is for

``{{ cookiecutter.task_class }}`` [active tense verb] ...
.. If the task consumes or creates datasets, name those datasets here.
.. If there are many datasets, name the ones that people use more frequently.
{%- if cookiecutter.script_name|length > 0 %}
``{{ cookiecutter.task_class }}`` is available as a :ref:`command-line task <pipe-tasks-command-line-tasks>`, :command:`{{ cookiecutter.script_name }}`.
{%- endif %}

.. _{{ cookiecutter.task_class}}-summary:

Processing summary
==================

.. If the task does not break work down into multiple steps, don't use a list.
.. Instead, summarize the computation itself in a paragraph or two.

``{{ cookiecutter.task_class }}`` runs this sequence of operations:

#. Runs this thing. (FIXME)

#. Processes processes that intermediate result. (FIXME)

#. Stores those results in this last step. (FIXME)
{%- if cookiecutter.script_name|length > 0 %}

.. {{ cookiecutter.task_class}}-cli:

{{ cookiecutter.script_name }} command-line interface
{{ "=" * (cookiecutter.script_name|length + 23) }}

.. code-block:: text

   {{ cookiecutter.script_name }} REPOPATH [@file [@file2 ...]] [--output OUTPUTREPO | --rerun RERUN] [--id] [other options]

Key arguments:

:option:`REPOPATH`
   The input Butler repository's URI or file path.

Key options:

:option:`--id`:
   The data IDs to process.

.. seealso::

   See :ref:`command-line-task-argument-reference` for details and additional options.
{%- endif %}

.. _{{ cookiecutter.task_class }}-api:

Python API summary
==================

.. lsst-task-api-summary:: {{ cookiecutter.task_module }}.{{ cookiecutter.task_class }}
{%- if cookiecutter.script_name|length > 0 %}

.. _{{ cookiecutter.task_class }}-butler:

Butler datasets
===============

When run as the ``{{ cookiecutter.script_name }}`` command-line task, or directly through the `~{{ cookiecutter.task_module}}.{{ cookiecutter.task_class }}.runDataRef` method, ``{{ cookiecutter.task_class }}`` obtains datasets from the input Butler data repository and persists outputs to the output Butler data repository.
Note that configurations for ``{{ cookiecutter.task_class }}``, and its subtasks, affect what datasets are persisted and what their content is.

.. _{{ cookiecutter.task_class }}-butler-inputs:

Input datasets
--------------

``fixmeDatasetName``
    Brief description of the dataset.

.. _{{ cookiecutter.task_class }}-butler-outputs:

Output datasets
---------------

``fixmeOutputDatasetName``
    Brief description of this output dataset.
{% endif %}

.. _{{ cookiecutter.task_class }}-subtasks:

Retargetable subtasks
=====================

.. lsst-task-config-subtasks:: lsst.pipe.tasks.processCcd.ProcessCcdTask

.. _{{ cookiecutter.task_class }}-configs:

Configuration fields
====================

.. lsst-task-config-fields:: lsst.pipe.tasks.processCcd.ProcessCcdTask

.. _{{ cookiecutter.task_class }}-examples:

Examples
========

.. Add a brief example here.
.. If there are multiple examples
.. (such as one from a command-line context and another that uses the Python API)
.. you can separate each example into a different subsection for clarity.

.. _{{ cookiecutter.task_class }}-debug:

Debugging
=========

.. If the task provides debug variables document them here using a definition list.

from templatekit.builder import cookiecutter_project_builder

# Copy file templates
Command(
    "{{cookiecutter.package_name}}/LICENSE",
    "../../file_templates/license_gplv3/LICENSE.jinja",
    Copy("$TARGET", "$SOURCE"))
Command(
    "{{cookiecutter.package_name}}/COPYRIGHT",
    "../../file_templates/copyright/COPYRIGHT.jinja",
    Copy("$TARGET", "$SOURCE"))

# Run cookiecutter to generate the 'example' package
# The explicit target directory, with AlwaysBuild, is needed for Scons to
# differentiate this build from the other example build below.
env = Environment(BUILDERS={'Cookiecutter': cookiecutter_project_builder})
env.Cookiecutter(AlwaysBuild(Dir('example')),
                 'cookiecutter.json')

# Run cookiecutter to generate the 'example_subpackage' package
# This shows off multi-level namespaces
# The explicit target directory, with AlwaysBuild, is needed for Scons to
# differentiate this build from the example build above. We can't use Scons'
# default build caching because we'd have to compute the cookiecutter
# template anyways.
env.Cookiecutter(AlwaysBuild(Dir('example_subpackage')),
                 'cookiecutter.json',
                 cookiecutter_context={'package_name': 'example_subpackage'})

# Run cookiecutter to generate the 'example_pythononly' package
# This shows off a Python-only package (and multi-level namespaces).
# The explicit target directory, with AlwaysBuild, is needed for Scons to
# differentiate this build from the example build above. We can't use Scons'
# default build caching because we'd have to compute the cookiecutter
# template anyways.
env.Cookiecutter(AlwaysBuild(Dir('example_pythononly')),
                 'cookiecutter.json',
                 cookiecutter_context={'package_name': 'example_pythononly',
                                       'uses_cpp': 'False'})

# Run cookiecutter to generate the 'example_dataonly' package
# This shows off a Data-only package that has no Python or C++ code.
# The explicit target directory, with AlwaysBuild, is needed for Scons to
# differentiate this build from the example build above. We can't use Scons'
# default build caching because we'd have to compute the cookiecutter
# template anyways.
env.Cookiecutter(AlwaysBuild(Dir('example_dataonly')),
                 'cookiecutter.json',
                 cookiecutter_context={'package_name': 'example_dataonly',
                                       'uses_cpp': 'False',
                                       'uses_python': 'False'})

# Run cookiecutter to generate the 'example_standalone' package.
# This shows off a package that doesn't belong to a stack like the LSST
# Science Pipelines. Consequently, it's doc directory is set up to be
# deployed as a single-package documentation site. Additionally, this example
# also shows off `sconsUtils` as the base package.
env.Cookiecutter(AlwaysBuild(Dir('example_standalone')),
                 'cookiecutter.json',
                 cookiecutter_context={'package_name': 'example_standalone',
                                       'stack_name': 'None',
                                       'base_package': 'setupUtils',
                                       'uses_cpp': 'False'})
